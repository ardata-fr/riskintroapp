% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/module-export.R
\name{exportServer}
\alias{exportServer}
\title{Export Module Server}
\usage{
exportServer(id = "export_module", files)
}
\arguments{
\item{id}{Character string. The module ID for namespacing. Should match the ID used in \code{\link{exportUI}}.}

\item{files}{A reactive expression that returns a named list of objects to be exported.
Supported object types include:
\itemize{
\item \code{sf} objects (geospatial data) - exported as GeoPackage (.gpkg) or Shapefile (.shp)
\item \code{data.frame} objects (datasets) - exported as Parquet (.parquet) or CSV (.csv)
\item \code{splatRaster} objects (raster data) - exported as TIFF
\item \code{ggplot} objects (plots) - exported as PNG, JPEG, or SVG
}

The nesting of the lists dictates the format of the display output. Top level
list names are section names and second level lists names are used to label
each dataset item and as the downloaded files' names.}
}
\value{
A reactive expression that returns export error information (NULL if no errors).
}
\description{
Server-side logic for the export module that handles file export functionality for
different data types including geospatial data, datasets, rasters, and plots.
}
\details{
This function creates a comprehensive export system with the following features:
\itemize{
\item Interactive modal dialog for selecting files and formats to export
\item Dynamic UI that adapts to the types of files available for export
\item Support for multiple export formats per data type
\item Single file export or bulk ZIP export when multiple files selected
\item Error handling with user-friendly error messages
\item File format validation and automatic extension handling
}

The export process:
\enumerate{
\item User clicks export button to open modal dialog
\item UI dynamically generates checkboxes and format selectors based on available files
\item User selects which files to export and their desired formats
\item Download handler processes selections and creates output files
\item For single file: direct download with proper filename and extension
\item For multiple files: creates temporary directory, exports all files, then ZIPs them
}
}
\examples{
\dontrun{
# In your Shiny server function
files_to_export <- reactive({
  list(
    "My csv data" = list(
     "my_data.csv" = my_dataframe,
    ),
    "My other stuff" = list(
    "spatial_data.gpkg" = my_sf_object,
    "plot.png" = my_ggplot
    )
  )
})

export_errors <- exportServer("my_export", files_to_export)

# Monitor export errors
observeEvent(export_errors(), {
  if (!is.null(export_errors())) {
    showNotification("Export failed!", type = "error")
  }
})
}

}
\seealso{
\code{\link{exportUI}} for the corresponding UI component
\code{\link{export_helper}} for the internal export processing logic
\code{\link{write_file_helper}} for format-specific file writing
}
\keyword{internal}
